python module _fillScape
    interface

        subroutine build_mesh(coords,boundary,cells_nodes,cells_edges,edges_nodes,extent,m,n,o,p)
            use queues
            real(kind=8) dimension(m,3),intent(in) :: coords
            integer dimension(p),intent(in) :: boundary
            integer dimension(n,3),intent(in) :: cells_nodes
            integer dimension(n,3),intent(in),depend(n) :: cells_edges
            integer dimension(o,2),intent(in) :: edges_nodes
            integer dimension(m),intent(in),depend(m) :: extent
            integer, optional,check(shape(coords,0)==m),depend(coords) :: m=shape(coords,0)
            integer, optional,check(shape(cells_nodes,0)==n),depend(cells_nodes) :: n=shape(cells_nodes,0)
            integer, optional,check(shape(edges_nodes,0)==o),depend(edges_nodes) :: o=shape(edges_nodes,0)
            integer, optional,check(len(boundary)>=p),depend(boundary) :: p=len(boundary)
        end subroutine build_mesh

        subroutine escape_grid(coords,boundary,ngbids,ngbnb,mids,extent,m,p)
            use queues
            real(kind=8) dimension(m,3),intent(in) :: coords
            integer dimension(p),intent(in) :: boundary
            integer dimension(m,12),intent(in),depend(m) :: ngbids
            integer dimension(m),intent(in),depend(m) :: ngbnb
            integer dimension(m),intent(in),depend(m) :: mids
            integer dimension(m),intent(in),depend(m) :: extent
            integer, optional,check(shape(coords,0)==m),depend(coords) :: m=shape(coords,0)
            integer, optional,check(len(boundary)>=p),depend(boundary) :: p=len(boundary)
        end subroutine escape_grid

        subroutine escape_grid_fast(z,tp,m)
            use queues
            integer intent(in) :: tp
            real(kind=8) dimension(m),intent(in) :: z
            integer, optional,check(len(z)>=m),depend(z) :: m=len(z)
        end subroutine escape_grid_fast

        subroutine fillpit(m,filled,watershedlabel,graphn)
            use queues
            integer intent(in) :: m
            real(kind=8) dimension(m),intent(out),depend(m) :: filled
            integer dimension(m),intent(out),depend(m) :: watershedlabel
            integer intent(out) :: graphn
        end subroutine fillpit

        subroutine get_spillover_nodes(graphnb,newwgraph)
            use queues
            integer intent(in) :: graphnb
            real(kind=8) dimension(graphnb,4),intent(out),depend(graphnb) :: newwgraph
        end subroutine get_spillover_nodes

        subroutine combine_edges(elev,watershed,ins,outs,newgraph,graphnb,m,n)
            use queues
            real(kind=8) dimension(m),intent(in) :: elev
            integer dimension(m),intent(in),depend(m) :: watershed
            integer dimension(n),intent(in) :: ins
            integer dimension(m),intent(in),depend(m) :: outs
            real(kind=8) dimension((m+n)*2,4),intent(out),depend(m,n) :: newgraph
            integer intent(out) :: graphnb
            integer, optional,check(len(elev)>=m),depend(elev) :: m=len(elev)
            integer, optional,check(len(ins)>=n),depend(ins) :: n=len(ins)
        end subroutine combine_edges

        subroutine combine_edges_fast(n,elev,watershed,newgraph,graphnb,m)
            use queues
            integer intent(in) :: n
            real(kind=8) dimension(m),intent(in) :: elev
            integer dimension(m),intent(in),depend(m) :: watershed
            real(kind=8) dimension((m+n)*2,4),intent(out),depend(m,n) :: newgraph
            integer intent(out) :: graphnb
            integer, optional,check(len(elev)>=m),depend(elev) :: m=len(elev)
        end subroutine combine_edges_fast

        subroutine global_graph_fill(nb,cgraph,maxnghbs,nelev,spillrank,spillnodes,spillid,order,m)
            use queues
            integer intent(in) :: nb
            real(kind=8) dimension(m,5),intent(in) :: cgraph
            integer intent(in) :: maxnghbs
            integer dimension(nb),intent(out),depend(nb) :: spillrank
            integer dimension(nb),intent(out),depend(nb) :: spillnodes
            integer dimension(nb),intent(out),depend(nb) :: spillid
            integer dimension(nb),intent(out),depend(nb) :: order
            real(kind=8) dimension(nb),intent(out),depend(nb) :: nelev
            integer, optional,check(shape(cgraph,0)==m),depend(cgraph) :: m=shape(cgraph,0)
        end subroutine global_graph_fill

        subroutine depression_info(zi,zf,area,depids,totpit,pitnb,pitvol,spillpts,m)
            use queues
            real(kind=8) dimension(m),intent(in) :: zi
            real(kind=8) dimension(m),intent(in),depend(m) :: zf
            real(kind=8) dimension(m),intent(in),depend(m) :: area
            integer dimension(m),intent(in),depend(m) :: depids
            integer intent(in) :: totpit
            integer dimension(m),intent(out),depend(m) :: pitnb
            real(kind=8) dimension(totpit),intent(out),depend(totpit) :: pitvol
            real(kind=8) dimension(totpit,2),intent(out),depend(totpit) :: spillpts
            integer, optional,check(len(zi)>=m),depend(zi) :: m=len(zi)
        end subroutine depression_info

    end interface
end python module _fillScape
