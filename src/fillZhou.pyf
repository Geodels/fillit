!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module _fillZhou ! in
    interface  ! in :_fillZhou
        subroutine fillinitialise(z,extent,step,m,n) ! in :_fillZhou:fillZhou.f90
            use queues
            real(kind=8) dimension(m,n),intent(in) :: z
            integer dimension(4),intent(in) :: extent
            integer intent(in) :: step
            integer, optional,check(shape(z,0)==m),depend(z) :: m=shape(z,0)
            integer, optional,check(shape(z,1)==n),depend(z) :: n=shape(z,1)
        end subroutine fillinitialise
        subroutine fillinitialise_unst_init(coords,boundary,cells_nodes,cells_edges,edges_nodes,extent,m,n,o,p) ! in :_fillZhou:fillZhou.f90
            use queues
            real(kind=8) dimension(m,3),intent(in) :: coords
            integer dimension(p),intent(in) :: boundary
            integer dimension(n,3),intent(in) :: cells_nodes
            integer dimension(n,3),intent(in),depend(n) :: cells_edges
            integer dimension(o,2),intent(in) :: edges_nodes
            integer dimension(m),intent(in),depend(m) :: extent
            integer, optional,check(shape(coords,0)==m),depend(coords) :: m=shape(coords,0)
            integer, optional,check(shape(cells_nodes,0)==n),depend(cells_nodes) :: n=shape(cells_nodes,0)
            integer, optional,check(shape(edges_nodes,0)==o),depend(edges_nodes) :: o=shape(edges_nodes,0)
            integer, optional,check(len(boundary)>=p),depend(boundary) :: p=len(boundary)
        end subroutine fillinitialise_unst_init
        subroutine params_unstpit(zi,zf,area,depids,totpit,pitnb,pitvol,spillpts,m) ! in :_fillZhou:fillZhou.f90
            use queues
            real(kind=8) dimension(m),intent(in) :: zi
            real(kind=8) dimension(m),intent(in),depend(m) :: zf
            real(kind=8) dimension(m),intent(in),depend(m) :: area
            integer dimension(m),intent(in),depend(m) :: depids
            integer intent(in) :: totpit
            integer dimension(m),intent(out),depend(m) :: pitnb
            real(kind=8) dimension(totpit),intent(out),depend(totpit) :: pitvol
            real(kind=8) dimension(totpit,2),intent(out),depend(totpit) :: spillpts
            integer, optional,check(len(zi)>=m),depend(zi) :: m=len(zi)
        end subroutine params_unstpit
        subroutine fillinitialise_unst_fast(coords,boundary,ngbids,ngbnb,mids,extent,m,p) ! in :_fillZhou:fillZhou.f90
            use queues
            real(kind=8) dimension(m,3),intent(in) :: coords
            integer dimension(p),intent(in) :: boundary
            integer dimension(m,12),intent(in),depend(m) :: ngbids
            integer dimension(m),intent(in),depend(m) :: ngbnb
            integer dimension(m),intent(in),depend(m) :: mids
            integer dimension(m),intent(in),depend(m) :: extent
            integer, optional,check(shape(coords,0)==m),depend(coords) :: m=shape(coords,0)
            integer, optional,check(len(boundary)>=p),depend(boundary) :: p=len(boundary)
        end subroutine fillinitialise_unst_fast
        subroutine fillinitialise_unst(z,m) ! in :_fillZhou:fillZhou.f90
            use queues
            real(kind=8) dimension(m),intent(in) :: z
            integer, optional,check(len(z)>=m),depend(z) :: m=len(z)
        end subroutine fillinitialise_unst
        subroutine combineregtiles(elev,watershed,ext,newgraph,graphnb,m,n) ! in :_fillZhou:fillZhou.f90
            use queues
            real(kind=8) dimension(m,n),intent(in) :: elev
            integer dimension(m,n),intent(in),depend(m,n) :: watershed
            integer dimension(4),intent(in) :: ext
            real(kind=8) dimension((m+n)*2,3),intent(out),depend(m,n) :: newgraph
            integer intent(out) :: graphnb
            integer, optional,check(shape(elev,0)==m),depend(elev) :: m=shape(elev,0)
            integer, optional,check(shape(elev,1)==n),depend(elev) :: n=shape(elev,1)
        end subroutine combineregtiles
        subroutine combine_unstgrids(elev,watershed,ins,outs,newgraph,graphnb,m,n) ! in :_fillZhou:fillZhou.f90
            use queues
            real(kind=8) dimension(m),intent(in) :: elev
            integer dimension(m),intent(in),depend(m) :: watershed
            integer dimension(n),intent(in) :: ins
            integer dimension(m),intent(in),depend(m) :: outs
            real(kind=8) dimension((m+n)*2,3),intent(out),depend(m,n) :: newgraph
            integer intent(out) :: graphnb
            integer, optional,check(len(elev)>=m),depend(elev) :: m=len(elev)
            integer, optional,check(len(ins)>=n),depend(ins) :: n=len(ins)
        end subroutine combine_unstgrids
        subroutine combine_unstgrids_fast(n,elev,watershed,newgraph,graphnb,m) ! in :_fillZhou:fillZhou.f90
            use queues
            integer intent(in) :: n
            real(kind=8) dimension(m),intent(in) :: elev
            integer dimension(m),intent(in),depend(m) :: watershed
            real(kind=8) dimension((m+n)*2,3),intent(out),depend(m,n) :: newgraph
            integer intent(out) :: graphnb
            integer, optional,check(len(elev)>=m),depend(elev) :: m=len(elev)
        end subroutine combine_unstgrids_fast
        subroutine graphfill(nb,cgraph,maxnghbs,nelev,m) ! in :_fillZhou:fillZhou.f90
            use queues
            integer intent(in) :: nb
            real(kind=8) dimension(m,3),intent(in) :: cgraph
            integer intent(in) :: maxnghbs
            real(kind=8) dimension(nb),intent(out),depend(nb) :: nelev
            integer, optional,check(shape(cgraph,0)==m),depend(cgraph) :: m=shape(cgraph,0)
        end subroutine graphfill
        subroutine watershedsmeet(c,nc) ! in :_fillZhou:fillZhou.f90
            use queues
            integer :: c
            integer :: nc
        end subroutine watershedsmeet
        subroutine processpitonepass(nlabel) ! in :_fillZhou:fillZhou.f90
            use queues
            integer :: nlabel
        end subroutine processpitonepass
        subroutine processtracequeueonepass(nlabel) ! in :_fillZhou:fillZhou.f90
            use queues
            integer :: nlabel
        end subroutine processtracequeueonepass
        subroutine fillpit_struct(m,n,filled,pitlabel,watershedlabel,graphn) ! in :_fillZhou:fillZhou.f90
            use queues
            integer intent(in) :: m
            integer intent(in) :: n
            real(kind=8) dimension(m,n),intent(out),depend(m,n) :: filled
            integer dimension(m,n),intent(out),depend(m,n) :: pitlabel
            integer dimension(m,n),intent(out),depend(m,n) :: watershedlabel
            integer intent(out) :: graphn
        end subroutine fillpit_struct
        subroutine fillpit_unstruct(m,filled,pitlabel,watershedlabel,graphn) ! in :_fillZhou:fillZhou.f90
            use queues
            integer intent(in) :: m
            real(kind=8) dimension(m),intent(out),depend(m) :: filled
            integer dimension(m),intent(out),depend(m) :: pitlabel
            integer dimension(m),intent(out),depend(m) :: watershedlabel
            integer intent(out) :: graphn
        end subroutine fillpit_unstruct
        subroutine cellconnect(nbcell,meshcells) ! in :_fillZhou:fillZhou.f90
            use queues
            integer intent(in) :: nbcell
            integer dimension(nbcell,4),intent(out),depend(nbcell) :: meshcells
        end subroutine cellconnect
        subroutine spillpts(graphnb,wgraph) ! in :_fillZhou:fillZhou.f90
            use queues
            integer intent(in) :: graphnb
            real(kind=8) dimension(graphnb,3),intent(out),depend(graphnb) :: wgraph
        end subroutine spillpts
        subroutine params_regpit(zi,zf,area,depids,totpit,pitnb,pitvol,spillpts,m,n) ! in :_fillZhou:fillZhou.f90
            use queues
            real(kind=8) dimension(m,n),intent(in) :: zi
            real(kind=8) dimension(m,n),intent(in),depend(m,n) :: zf
            real(kind=8) intent(in) :: area
            integer dimension(m,n),intent(in),depend(m,n) :: depids
            integer intent(in) :: totpit
            integer dimension(m,n),intent(out),depend(m,n) :: pitnb
            real(kind=8) dimension(totpit),intent(out),depend(totpit) :: pitvol
            real(kind=8) dimension(totpit,3),intent(out),depend(totpit) :: spillpts
            integer, optional,check(shape(zi,0)==m),depend(zi) :: m=shape(zi,0)
            integer, optional,check(shape(zi,1)==n),depend(zi) :: n=shape(zi,1)
        end subroutine params_regpit
    end interface
end python module _fillZhou

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
